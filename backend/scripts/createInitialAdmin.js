const mongoose = require('mongoose');
const User = require('../models/User');
const dotenv = require('dotenv');
const connectDB = require('../config/db');

dotenv.config();

/**
 * Script pour cr√©er un compte administrateur initial
 * Le mot de passe sera automatiquement hach√© par le middleware pre-save du mod√®le User
 * Utiliser: node scripts/createInitialAdmin.js
 */
const createAdmin = async () => {
  try {
    // Connexion √† la base de donn√©es en utilisant la fonction du projet
    await connectDB();
    console.log('MongoDB connect√© - Pr√™t √† cr√©er l\'administrateur');

    // Param√®tres de l'administrateur, √† d√©finir dans .env ou utiliser les valeurs par d√©faut
    const adminEmail = process.env.INITIAL_ADMIN_EMAIL || 'admin@admin.com';
    const adminPassword = process.env.INITIAL_ADMIN_PASSWORD || 'password';
    const adminName = process.env.INITIAL_ADMIN_NAME || 'Admin';
    
    // V√©rifier si l'administrateur existe d√©j√†
    const existingUser = await User.findOne({ email: adminEmail });
    if (existingUser) {
      console.log(`Utilisateur administrateur ${adminEmail} existe d√©j√†`);
      
      // Mise √† jour du mot de passe si n√©cessaire (r√©initialisation)
      // Le middleware pre-save se chargera automatiquement du hachage
      existingUser.password = adminPassword;
      await existingUser.save(); // Laisser le middleware faire son travail
      
      console.log(`Mot de passe de l'administrateur r√©initialis√©.`);
      console.log(`Email: ${adminEmail}`);
      console.log(`Mot de passe: ${adminPassword}`);
      
      mongoose.connection.close();
      return;
    }

    // Cr√©ation de l'administrateur avec mot de passe en clair
    // Le middleware pre-save du mod√®le User se chargera automatiquement du hachage
    const admin = new User({
      fullName: adminName,
      email: adminEmail,
      password: adminPassword, // Mot de passe en clair - sera hach√© par le middleware
      role: 'Admin',
      verified: true,
      profileStatus: 'approved'
    });
    
    // Sauvegarder normalement - le middleware pre-save hachera automatiquement le mot de passe
    await admin.save();

    console.log(`‚úÖ Administrateur cr√©√© avec succ√®s: ${admin.email}`);
    console.log(`üìß Email: ${adminEmail}`);
    console.log(`üîë Mot de passe: ${adminPassword}`);
    console.log(`üîê Le mot de passe a √©t√© automatiquement hach√© par le middleware`);
    console.log(`‚ö†Ô∏è  N'oubliez pas de changer le mot de passe apr√®s la premi√®re connexion!`);
    
    // V√©rification que le mot de passe a bien √©t√© hach√©
    const savedAdmin = await User.findOne({ email: adminEmail });
    console.log(`üß™ V√©rification - Mot de passe hach√©: ${savedAdmin.password.startsWith('$2b$') ? 'OUI' : 'NON'}`);
    
    mongoose.connection.close();
  } catch (error) {
    console.error(`‚ùå Erreur lors de la cr√©ation de l'administrateur: ${error.message}`);
    console.error(error);
    try {
      mongoose.connection.close();
    } catch (e) {
      // ignore
    }
  }
};

createAdmin();