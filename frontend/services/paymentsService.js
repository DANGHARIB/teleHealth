import api from './api';
import { doctorAPI, patientAPI, adminAPI } from './api';

/**
 * Service de gestion des paiements pour l'application mobile
 */

/**
 * Transformer les donn√©es de paiement de l'API vers le format de l'interface utilisateur
 * @param {Object} apiPayment - Paiement provenant de l'API
 * @returns {Object} - Paiement format√© pour l'UI
 */
const transformPaymentData = (apiPayment) => {
  return {
    id: apiPayment._id,
    amount: apiPayment.amount || 0,
    date: apiPayment.paymentDate || apiPayment.createdAt,
    status: apiPayment.status || 'pending',
    method: apiPayment.paymentMethod,
    methodDisplay: formatPaymentMethod(apiPayment.paymentMethod),
    description: apiPayment.appointment?.caseDetails || 'Consultation',
    
    // Relations
    doctor: apiPayment.appointment?.doctor ? {
      id: apiPayment.appointment.doctor._id,
      name: apiPayment.appointment.doctor.full_name || 
        `${apiPayment.appointment.doctor.first_name || ''} ${apiPayment.appointment.doctor.last_name || ''}`.trim()
    } : null,
    
    patient: apiPayment.patient ? {
      id: apiPayment.patient._id,
      name: `${apiPayment.patient.first_name || ''} ${apiPayment.patient.last_name || ''}`.trim()
    } : null,
    
    appointment: apiPayment.appointment ? {
      id: apiPayment.appointment._id,
      date: apiPayment.appointment.availability?.date,
      time: apiPayment.appointment.slotStartTime
    } : null,
    
    // M√©tadonn√©es
    transactionId: apiPayment.transactionId,
    createdAt: apiPayment.createdAt,
    updatedAt: apiPayment.updatedAt,
    
    // Donn√©es originales
    _original: apiPayment
  };
};

/**
 * Formater la m√©thode de paiement pour l'affichage
 * @param {string} method - Code de la m√©thode de paiement
 * @returns {string} - Nom d'affichage de la m√©thode
 */
const formatPaymentMethod = (method) => {
  const methods = {
    'card': 'Carte bancaire',
    'paypal': 'PayPal',
    'apple_pay': 'Apple Pay',
    'google_pay': 'Google Pay'
  };
  
  return methods[method] || method || 'Carte bancaire';
};

const paymentsService = {
  /**
   * R√©cup√©rer tous les paiements d'un patient (pour l'utilisateur connect√©)
   * @returns {Promise<Array>} Liste des paiements
   */
  getPatientPayments: async () => {
    try {
      console.log('üîç R√©cup√©ration des paiements du patient...');
      const payments = await patientAPI.getPayments();
      console.log(`‚úÖ ${payments.length} paiements r√©cup√©r√©s`);
      
      return payments.map(payment => transformPaymentData(payment));
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des paiements:', error);
      throw error;
    }
  },
  
  /**
   * R√©cup√©rer tous les paiements d'un m√©decin (pour l'utilisateur connect√©)
   * @returns {Promise<Array>} Liste des paiements
   */
  getDoctorPayments: async () => {
    try {
      console.log('üîç R√©cup√©ration des paiements du m√©decin...');
      const payments = await doctorAPI.getPayments();
      console.log(`‚úÖ ${payments.length} paiements r√©cup√©r√©s`);
      
      return payments.map(payment => transformPaymentData(payment));
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des paiements:', error);
      throw error;
    }
  },
  
  /**
   * R√©cup√©rer les d√©tails d'un paiement par son ID
   * @param {string} id - ID du paiement
   * @returns {Promise<Object>} D√©tails du paiement
   */
  getPaymentById: async (id) => {
    try {
      console.log(`üîç R√©cup√©ration du paiement ${id}...`);
      const payment = await doctorAPI.getPaymentById(id);
      console.log('‚úÖ Paiement r√©cup√©r√©');
      
      return transformPaymentData(payment);
    } catch (error) {
      console.error(`‚ùå Erreur lors de la r√©cup√©ration du paiement ${id}:`, error);
      throw error;
    }
  },
  
  /**
   * Cr√©er un paiement pour un rendez-vous
   * @param {Object} paymentData - Donn√©es du paiement
   * @returns {Promise<Object>} Paiement cr√©√©
   */
  createPaymentWithAppointment: async (paymentData) => {
    try {
      console.log('üîç Cr√©ation du paiement avec rendez-vous...');
      const result = await patientAPI.createPaymentWithAppointment(paymentData);
      console.log('‚úÖ Paiement et rendez-vous cr√©√©s');
      
      return {
        appointment: result.appointment,
        payment: transformPaymentData(result.payment)
      };
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation du paiement avec rendez-vous:', error);
      throw error;
    }
  }
};

export default paymentsService; 